상속이란 무엇인가?
상속(Inheritance) 부모가 자식에게 물려주고 자식은 상속을 통해 부모의 것을 자연스럽게 쓸 수 있다.
부모 클래스(상위 클래스) / 자식 클래스(하위 클래스, 파생 클래스)

1. 코드의 중복을 줄여 개발시간을 절약시키는데 효율적이다.
2. 클래스의 수정을 최소화시킬 수 있다. 부모 클래스를 수정하면 모든 자식 클래스의 수정효과를 가져오는데, 이는 유지보수 시간을 최소화시켜준다.

현실에서는 부모가 자식을 선택하는데, 프로그램에서는 자식이 부모를 선택한다.

Java = extends 부모 클래스명 / Python = class 클래스명(부모 클래스명)

    자바는 다른 언어와 달리 다중 상속을 허용하지 않는다.
    자식 객체를 생성하면 부모 객체가 먼저 생성되고 자식 객체가 다음에 생성된다.
    모든 객체는 클래스의 생성자를 호출해야 생성된다.
    부모 클래스의 모든 메소드가 자식 클래스에 맞게 설계되있는 것이 가장 이상적이나 어떤 메소드는 자식 클래스가 사용하기 적합하지 않을 수 있다.
        이 경우 상속된 일부 메소드는 자식 클래스에서 다시 수정해서 사용한다.

다향성은 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다. 동음이의어라 비유해도 좋다.
코드 측면에서 보면 다향성은 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 한다.
이 다향성을 위해 자바는 부모 클래스로 타입 변환을 허용하는데, 부모 타입에 모든 자식 객체가 대입될 수 있다.
이것을 이용하여 객체의 부품화가 가능하다.

자동 타입 변환 : 프로그램 실행 도중 자동적으로 타입 변환이 일어나는 것. 조건은 다음과 같다.
                부모 클래스 변수 = 자식 클래스 타입;
                    부모 타입으로 자동 타입 변환된 이후에는 부모 클래스에 선언된 필드와 메소드만 접근이 가능하다.
                    다향성을 수현하는 기술적 방법 때문에 자동 타입 변환이 필요하다.

상속 : 객체 지향 프로그래밍(OOP : Object Oriented Programming)의 큰 특성 중 하나. 다른 표현으로 계승, 확장이 있다.
관계로는 A is a B(A는 B다)라 표현한다. 쉽게, 자식 클래스가 부모 클래스의 기능을 받아 쓰는 것이다.
상속을 사용하면 기존에 만들어 둔 것들을 재사용할 수 있는 것이다. 금형틀과 일맥상통하는 부분인데, 수정의 이유로 코드를 대대적으로 손 볼 필요가 없다.
상속을 사용하게 되면 추가가 필요한 부분은 변수 하나만 추가하면 되는 것.

문제점은 아래와 같다.
1. 보안상 허점 : 하위 클래스로 상속되어 상위 클래스의 정보를 뜯어낼 수 있다.
2. 유연성 저하 : 컴파일 시점에 부모를 지정하면 런타임 시점에 바꾸는 방법이 거의 바닥이므로 유연성이 많이 떨어진다.
                    또한 클래스 별의 응집도가 높고 타 클래스와는 결합이 떨어지는게 좋은 객체지향 코드이나, 상속의 경우 부모 클래스가 없다면 자식 클래스는 이도저도 클래스가 되버린다.
                    상속하는 순간 한 세트이기 때문에 서브 클래스는 전혀 의미없게 된다.
3. 결과와 과정의 혼란 : 특정 기능을 넣으려 억지로 상속시키다 전혀 다른 의미의 상속이 될 수 있다.
4. 의도 외 결과 : 자식 클래스의 행동이 보여주는 결과가 결과가 가지는 조건, 의미 등이 부모 클래스 때와는 딴판으로 달라질 수 있다.
                    ex) 사람-악수, 가위손-악수?